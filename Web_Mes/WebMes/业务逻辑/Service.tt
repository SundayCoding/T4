<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

//  导入MultipleOutputHelper.ttinclude文件ce
<#@ include file="..\MultipleOutputHelper.ttinclude" #>

<#		
		//生成单张表
		var createname="MES_StyleProcess";
		string connectionString= "Password=sa;Persist Security Info=True;User ID=sa;Initial Catalog=FTT_MES;Data Source=192.168.1.204";		
		SqlConnection conn = new SqlConnection(connectionString);
		conn.Open();
	
		string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
		SqlCommand command = new SqlCommand(selectQuery,conn);
		SqlDataAdapter ad = new SqlDataAdapter(command);
		System.Data.DataSet ds = new DataSet(); 
  
		var manager = Manager.Create(Host, GenerationEnvironment);  

		System.Data.DataTable schema = conn.GetSchema("Tables");
		//var datarow=schema.Select("TABLE_TYPE = 'BASE TABLE' ");
		List<DataRow> datarow = new List<DataRow>();
		//System.Data.DataRow[] datarow = null;
		//var datarow=null;
		if(!string.IsNullOrEmpty(createname)){
			datarow=schema.Select( string.Format("TABLE_TYPE = 'BASE TABLE' and TABLE_NAME='{0}'",createname)).ToList();
        }else{
			datarow=schema.Select("TABLE_TYPE = 'BASE TABLE' ").ToList();
        }
		foreach(System.Data.DataRow row in datarow)
		{	
			ds.Tables.Clear();
			string tb_name= row["TABLE_NAME"].ToString();		
			command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
			ad.FillSchema(ds, SchemaType.Mapped,tb_name);  
			manager.StartNewFile(tb_name+"Service.cs");#>
/*
*
*Author:		<zhangby>
*Create date:   <<#=DateTime.Now#>>
*Description:	本页面有T4模板自动生成,并不完全正确,根据实际情况进行修改
*				根据业务实际需要添加修改删除代码
*
*/
using FluentData;
using FttCloud.Public.Database;
using FttData.Core;
using FttData.Core.Rules;
using FttData.Model.WEB.Base;
using FttData.Model.WEB.<#=tb_name.Trim()#>Model;
using System;
using System.Collections.Generic;
using System.Linq;
namespace FttData.Api.BLL.Service
{	
	/// <summary>
    /// <#=tb_name#>_Name 操作类
    /// </summary>
	public partial class <#=tb_name.Trim()#>Service
	{<#
		string fkQuery = " SELECT f.name AS ForeignKey,";
		fkQuery += " OBJECT_NAME(f.parent_object_id) AS TableName, ";
		fkQuery += " COL_NAME(fc.parent_object_id, fc.parent_column_id) AS ColumnName, ";
		fkQuery += " OBJECT_NAME (f.referenced_object_id) AS ReferenceTableName, ";
		fkQuery += " COL_NAME(fc.referenced_object_id, fc.referenced_column_id) AS ReferenceColumnName ";
		fkQuery += " FROM ";
		fkQuery += " sys.foreign_keys AS f ";
		fkQuery += " INNER JOIN sys.foreign_key_columns AS fc ON f.OBJECT_ID = fc.constraint_object_id ";
		fkQuery += " where OBJECT_NAME(f.parent_object_id) = '" +tb_name +"'";

		List<string> fkColumnNames = new List<string>();
		Dictionary<string, string> parentTables = new Dictionary<string, string>();
	
		SqlCommand command2 = new SqlCommand(fkQuery,conn);
		using(var dr = command2.ExecuteReader())
		{
			while(dr.Read())
			{
				fkColumnNames.Add(dr["ColumnName"].ToString());
				     if(!parentTables.Keys.Where(a=>a.Equals(dr["ColumnName"].ToString())).Any()){
						parentTables.Add(dr["ColumnName"].ToString(), dr["ReferenceTableName"].ToString());
                     }
				
			}
			dr.Close();
		}
	
		
	

		List<DataColumn> fkColumns = new List<DataColumn>();
		foreach(string fkColumnName in fkColumnNames)
		{
			foreach (DataColumn dc in ds.Tables[0].Columns) 
			{
				if(dc.ColumnName == fkColumnName)
					fkColumns.Add(dc);
			}
		}

		List<string> primaryKeyParamsWithTypes = new List<string>();
		List<string> primaryKeyParams = new List<string>();
		List<string> whereItems = new List<string>();
		List<string> automapItems = new List<string>();
		foreach(DataColumn pk in ds.Tables[0].PrimaryKey)
		{
			primaryKeyParamsWithTypes.Add(string.Format("{0} {1}", pk.DataType.Name, this.ToCamelCase(pk.ColumnName)));
			primaryKeyParams.Add(pk.ColumnName);
			whereItems.Add(string.Format("{0} = @{1}", pk.ColumnName, pk.ColumnName.ToLower()));
			automapItems.Add(string.Format("x.{0}", pk.ColumnName));
		}

		string updateAutomap = string.Empty;
	if(automapItems.Count > 0){
		if(automapItems.Count > 1)
			updateAutomap = "new { " + string.Join(", ", automapItems.ToArray()) + " }";
		else
			updateAutomap = automapItems[0];
			}
		#>

		#region 初始化
		/// <summary>
        /// 用户
        /// </summary>
        private UserRule User=null;
		/// <summary>
		///初始化放入用户信息
        /// </summary>
        /// <param name="user">用户信息</param>
        public  <#=tb_name#>Service(UserRule user)
        {
            this.User = user;
        }
		/// <summary>
        /// 初始化
        /// </summary>
        public  <#=tb_name#>Service()
        {
        }
        #endregion 

		#region Master主表操作

		#region <#=tb_name#>_Name(Get)
		/// <summary>
		///获取 <#=tb_name#>_Name
        /// </summary>
        /// <param name="request"></param>
		/// <param name="T">根据条件自行修改，不能直接使用</param>
        /// <returns></returns>
        public ApiBaseResponseTotal<dynamic> Get(ApiPageBaseRequestModel<<#=tb_name#>Parameters> request)
        {
            var response = new ApiBaseResponseTotal<dynamic>();
            try
            {
                var db = Db.getContext();
                using (var command = db.NewContext().MultiResultSql)
                {
                   var sql = @"select * from <#=tb_name#> ";
                    var sqlcount ="select  count(*) from <#=tb_name#>";
                    #region Where添加条件
                    //if(request.data...)
                    //sql+=....
                    //sqlcount+=wheresql;
                    #endregion
                    sql += $" order by ID  OFFSET ({request.PageIndex} - 1)  * {request.PageSize} rows fetch next {request.PageSize}  rows only;";
                    var res = command.Sql(sql+sqlcount).QueryMany<dynamic>().ToArray();
                    response.items = res;
                    response.total = command.QuerySingle<int>();
                }
                response.success = true;
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }
		#endregion

		#region <#=tb_name#>_Name(Add)
		/// <summary>
        /// 添加<#=tb_name#>_Name
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseModel Add(ApiPageBaseRequestModel<<#=tb_name#>Exent> request)
        {
            var response = new ApiBaseResponseModel();
            try
            {
                using (var db = Db.getContext().NewContext())
                {
                    using (var tran = db.UseTransaction(true))
                    {
						var model = request.data;
						#region 逻辑操作
                        //获取插入后id
                        // int lastID = tran.Insert("<#=tb_name#>", model).AutoMap(a => a.ID, a => a.<#=tb_name#>DetailList).ExecuteReturnLastId<int>();
                        //如果有关联明细表则需要下面处理
                        //foreach (var item in model.<#=tb_name#>DetailList)
                        //{
                        //    item.<#=tb_name#>ID = lastID;
                        //    _insertDetail(tran, item);
                        //}
						#endregion
                        tran.Commit();
                        response.success = true;
                    }

                }


                response.success = true;
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }
		#endregion

		#region <#=tb_name#>_Name(Update)
		/// <summary>
        /// 编辑<#=tb_name#>_Name
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseModel Update(ApiPageBaseRequestModel<<#=tb_name#>Exent> request)
        {
            var response = new ApiBaseResponseModel();

            try
            {
                using (var db = Db.getContext().NewContext())
                {
                    using (var tran = db.UseTransaction(true))
                    {
						var model = request.data;
						#region 逻辑操作
                        //过滤模型中不存在数据库表中的字段 必须否则会报错
                        // db.Update("<#=tb_name#>", model).AutoMap(x => x.ID, x => x.<#=tb_name#>DetailList) .Where("ID",model.ID).Execute();
                        //CRUD明细的增删改 
                        //foreach (var item in model.<#=tb_name#>DetailList.Where(a=>a.ID==0))
                        //{
                        //    item.<#=tb_name#>ID = model.ID;
                        //    _insertDetail(tran, item);
                        //}
                        //foreach (var item in model.<#=tb_name#>DetailList.Where(a => a.ID> 0))
                        //{
                        //    _updateDetail(tran, item);
                        //}
						#endregion
                        tran.Commit();
                        response.success = true;
                    }
                }


            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }
		#endregion

		#region <#=tb_name#>_Name(Delete)
		 /// <summary>
        /// 删除<#=tb_name#>_Name
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseModel Delete(ApiBaseRequestModel<List<int>> request)
        {
            var response = new ApiBaseResponseModel();

            try
            {
                using (var db = Db.getContext().NewContext())
                {
                    using (var tran = db.UseTransaction(true))
                    {
                         foreach (var id in request.data)
                        {
                            #region 逻辑操作
                            //如果有明显需要先删除明细
                            //tran.Delete("<#=tb_name#>Detail").Where("<#=tb_name#>ID", id).Execute();
							//删除
                            tran.Delete("<#=tb_name#>").Where("ID", id).Execute();
                            #endregion
                        }
                        tran.Commit();
                        response.success = true;
                    }
                }


            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }
		#endregion

		#region <#=tb_name#>_Name(Copy)
		/// <summary>
        /// 复制<#=tb_name#>_Name
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseModel Copy(ApiBaseRequestModel<int> request)
        {
            var response = new ApiBaseResponseModel();
            try
            {
                 var db = Db.getContext().NewContext();
                //查询主表
                var master = db.Sql("select * from <#=tb_name#> where id=@id").Parameter("id", request.data).QuerySingle<<#=tb_name#>>();
                //如果有明细表则需要查询明细表
                //var detial = db.Sql("select * from <#=tb_name#>Detail where <#=tb_name#>ID=@id").Parameter("id", request.data).QueryMany<<#=tb_name#>Detail>();
                using (var tran = db.UseTransaction(true))
                {
                    #region 逻辑处理
                    //过滤模型中不存在数据库表中的字段 必须否则会报错
                    //var lastID = db.Insert("<#=tb_name#>", master).AutoMap(x => x.ID).ExecuteReturnLastId<int>();
                    //如果有明细则需要更新明细
                    //foreach (var item in detial)
                    //{
                    //    item.<#=tb_name#>ID = lastID;
                    //    _insertDetail(tran, item);
                    //}
                    #endregion
                    db.Commit();
                    response.success = true;
                }
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }
		#endregion

		#endregion

		//明细操作  如果不需要则注释
		#region <#=tb_name#>_Name明细 增删改方法组
        private void _insertDetail(IDbContext db, <#=tb_name#>Detail entity)
        {
            db.Insert("<#=tb_name#>Detail", entity).AutoMap(x => x.ID).Execute();
        }
        private void _updateDetail(IDbContext db, <#=tb_name#>Detail entity)
        {
            db.Update("<#=tb_name#>Detail", entity).AutoMap(x => x.ID).Where("ID", entity.ID).Execute();
        }
        private void _delDetail(IDbContext db, <#=tb_name#>Detail entity)
        {
            db.Delete("<#=tb_name#>Detail").Where("ID", entity.ID).Execute();
        }
        #endregion


		#region <#=tb_name#>_Name明细（增,删,查）
        /// <summary>
        /// <#=tb_name#>_Name明细 获取 根据<#=tb_name#>_NameID
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseTotal<dynamic> Get<#=tb_name#>DetailBy<#=tb_name#>ID(ApiPageBaseRequestModel<int> request)
        {
            var response = new ApiBaseResponseTotal<dynamic>();
            try
            {
                var sql = $"SELECT * FROM <#=tb_name#>Detail  WHERE <#=tb_name#>ID = {request.data} order by ID";
                sql += $"   OFFSET ({request.PageIndex} - 1)  * {request.PageSize} rows fetch next {request.PageSize}  rows only;";
                var db = Db.getContext().NewContext();
                using (var command = db.MultiResultSql)
                {
                    response.items = command.Sql(sql + "select count(*) from <#=tb_name#>Detail where <#=tb_name#>ID=@<#=tb_name#>ID;").Parameter("<#=tb_name#>ID", request.data).QueryMany<dynamic>().ToArray();
                    response.total = command.QuerySingle<int>();
                }

                response.success = true;
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }
        /// <summary>
        /// 删除  <#=tb_name#>_Name明细
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseModel Del<#=tb_name#>DetailByIDs(ApiBaseRequestModel<List<int>> request)
        {
            var response = new ApiBaseResponseModel();
            try
            {
                var db = Db.getContext().NewContext();
                foreach (var id in request.data)
                {
                    _delDetail(db, new <#=tb_name#>Detail() { ID = id });
                }
                response.success = true;
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }

        /// <summary>
        /// 添加  <#=tb_name#>_Name明细
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseModel Add<#=tb_name#>Detail(ApiBaseRequestModel<List<<#=tb_name#>Detail>> request)
        {
            var response = new ApiBaseResponseModel();
            try
            {
                var db = Db.getContext().NewContext();
                foreach (var item in request.data)
                {
                    _insertDetail(db, item);
                }
                response.success = true;
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }

        #endregion

		//下方获取待处理数据，如果不需要则删除
		#region 获取待处理数据

		/// <summary>
        /// 获取待处理数据
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public ApiBaseResponseTotal<dynamic> GetPendingData(ApiPageBaseRequestModel<PendingDataParameters> request)
        {
            var response = new ApiBaseResponseTotal<dynamic>();
            try
            {
                var db = Db.getContext();
                using (var command = db.NewContext().MultiResultSql)
                {
                    var sql = @"  ";
                    var sqlcount = @" ";
                    #region Where添加条件
                    //if (request.data.StartTime.HasValue && request.data.EndTime.HasValue)
                    //{
                      //  var datesql = $" and b.CreateDate between  '{request.data.StartTime.Value}' and  '{request.data.EndTime.Value}')";
                      //  sql += datesql;
                      //  sqlcount += datesql;
                   // }

                    #endregion
                    sql += $" order by ID  OFFSET ({request.PageIndex} - 1)  * {request.PageSize} rows fetch next {request.PageSize}  rows only;";
                    var res = command.Sql(sql + sqlcount).QueryMany<dynamic>().ToArray();
                    response.items = res;
                    response.total = command.QuerySingle<int>();
                }
                response.success = true;
            }
            catch (Exception ex)
            {
                response.success = false;
                response.message = ex.Message;
            }
            return response;
        }

		#endregion


	}
	
}
	
<#
		manager.EndBlock();    
         }            
        conn.Close();  
       manager.Process(true);  
	    #> 



<#+
    public string ToCamelCase(string value)
    {
		if(string.IsNullOrEmpty(value)) 
			return string.Empty;
        
		string firstLetter = value.Substring(0, 1);
		string rest = value.Substring(1, value.Length - 1);
		return firstLetter.ToLower() + rest;
    }
#>